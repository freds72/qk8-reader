# Generated from FGD.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,17,142,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,
        7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,3,11,65,8,11,1,11,4,11,68,8,11,
        11,11,12,11,69,1,11,1,11,4,11,74,8,11,11,11,12,11,75,3,11,78,8,11,
        1,12,1,12,4,12,82,8,12,11,12,12,12,83,1,12,1,12,1,13,1,13,1,13,5,
        13,91,8,13,10,13,12,13,94,9,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,3,16,109,8,16,1,17,1,17,1,17,1,17,
        5,17,115,8,17,10,17,12,17,118,9,17,1,17,1,17,1,17,1,17,1,17,1,18,
        1,18,1,18,1,18,5,18,129,8,18,10,18,12,18,132,9,18,1,18,1,18,1,19,
        4,19,137,8,19,11,19,12,19,138,1,19,1,19,1,116,0,20,1,1,3,2,5,3,7,
        4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,0,31,
        0,33,0,35,15,37,16,39,17,1,0,4,4,0,10,10,13,13,34,34,92,92,3,0,65,
        90,95,95,97,122,2,0,10,10,13,13,3,0,9,10,13,13,32,32,149,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
        0,39,1,0,0,0,1,41,1,0,0,0,3,43,1,0,0,0,5,45,1,0,0,0,7,47,1,0,0,0,
        9,49,1,0,0,0,11,51,1,0,0,0,13,53,1,0,0,0,15,55,1,0,0,0,17,57,1,0,
        0,0,19,59,1,0,0,0,21,61,1,0,0,0,23,64,1,0,0,0,25,79,1,0,0,0,27,87,
        1,0,0,0,29,95,1,0,0,0,31,97,1,0,0,0,33,108,1,0,0,0,35,110,1,0,0,
        0,37,124,1,0,0,0,39,136,1,0,0,0,41,42,5,64,0,0,42,2,1,0,0,0,43,44,
        5,61,0,0,44,4,1,0,0,0,45,46,5,58,0,0,46,6,1,0,0,0,47,48,5,40,0,0,
        48,8,1,0,0,0,49,50,5,44,0,0,50,10,1,0,0,0,51,52,5,123,0,0,52,12,
        1,0,0,0,53,54,5,125,0,0,54,14,1,0,0,0,55,56,5,41,0,0,56,16,1,0,0,
        0,57,58,5,43,0,0,58,18,1,0,0,0,59,60,5,91,0,0,60,20,1,0,0,0,61,62,
        5,93,0,0,62,22,1,0,0,0,63,65,5,45,0,0,64,63,1,0,0,0,64,65,1,0,0,
        0,65,67,1,0,0,0,66,68,3,31,15,0,67,66,1,0,0,0,68,69,1,0,0,0,69,67,
        1,0,0,0,69,70,1,0,0,0,70,77,1,0,0,0,71,73,5,46,0,0,72,74,3,31,15,
        0,73,72,1,0,0,0,74,75,1,0,0,0,75,73,1,0,0,0,75,76,1,0,0,0,76,78,
        1,0,0,0,77,71,1,0,0,0,77,78,1,0,0,0,78,24,1,0,0,0,79,81,5,34,0,0,
        80,82,8,0,0,0,81,80,1,0,0,0,82,83,1,0,0,0,83,81,1,0,0,0,83,84,1,
        0,0,0,84,85,1,0,0,0,85,86,5,34,0,0,86,26,1,0,0,0,87,92,3,29,14,0,
        88,91,3,29,14,0,89,91,3,31,15,0,90,88,1,0,0,0,90,89,1,0,0,0,91,94,
        1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,28,1,0,0,0,94,92,1,0,0,0,
        95,96,7,1,0,0,96,30,1,0,0,0,97,98,2,48,57,0,98,32,1,0,0,0,99,100,
        5,116,0,0,100,101,5,114,0,0,101,102,5,117,0,0,102,109,5,101,0,0,
        103,104,5,102,0,0,104,105,5,97,0,0,105,106,5,108,0,0,106,107,5,115,
        0,0,107,109,5,101,0,0,108,99,1,0,0,0,108,103,1,0,0,0,109,34,1,0,
        0,0,110,111,5,47,0,0,111,112,5,42,0,0,112,116,1,0,0,0,113,115,9,
        0,0,0,114,113,1,0,0,0,115,118,1,0,0,0,116,117,1,0,0,0,116,114,1,
        0,0,0,117,119,1,0,0,0,118,116,1,0,0,0,119,120,5,42,0,0,120,121,5,
        47,0,0,121,122,1,0,0,0,122,123,6,17,0,0,123,36,1,0,0,0,124,125,5,
        47,0,0,125,126,5,47,0,0,126,130,1,0,0,0,127,129,8,2,0,0,128,127,
        1,0,0,0,129,132,1,0,0,0,130,128,1,0,0,0,130,131,1,0,0,0,131,133,
        1,0,0,0,132,130,1,0,0,0,133,134,6,18,0,0,134,38,1,0,0,0,135,137,
        7,3,0,0,136,135,1,0,0,0,137,138,1,0,0,0,138,136,1,0,0,0,138,139,
        1,0,0,0,139,140,1,0,0,0,140,141,6,19,0,0,141,40,1,0,0,0,12,0,64,
        69,75,77,83,90,92,108,116,130,138,1,6,0,0
    ]

class FGDLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    NUMBER = 12
    QUOTED_STRING = 13
    KEYWORD = 14
    BLOCKCOMMENT = 15
    LINECOMMENT = 16
    WS = 17

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'@'", "'='", "':'", "'('", "','", "'{'", "'}'", "')'", "'+'", 
            "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "NUMBER", "QUOTED_STRING", "KEYWORD", "BLOCKCOMMENT", "LINECOMMENT", 
            "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "NUMBER", "QUOTED_STRING", 
                  "KEYWORD", "CHAR", "DIGIT", "BOOLEAN", "BLOCKCOMMENT", 
                  "LINECOMMENT", "WS" ]

    grammarFileName = "FGD.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


